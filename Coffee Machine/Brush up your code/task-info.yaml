type: edu
custom_name: stage6
files:
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    fun main() {
        println("Hello, world!")
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/ProductMaker.kt
  visible: true
  text: |-
    package machine

    import machine.order.Order
    import machine.order.Part
    import machine.product.IngredientStore
    import machine.product.ProductType
    import kotlin.math.min


    class ProductMaker(var ingredients: IngredientStore) {
        companion object {
            /** Returns how many pieces of the product in [product] could be produced
             * with the [storedIngredients].*/
            fun howManyPiecesProducible(
                storedIngredients: IngredientStore,
                product: ProductType
            ): Int {
                val partIngredients = product.ingredients

                val fromCups = storedIngredients.cups / partIngredients.cups
                val fromWater = storedIngredients.waterMl / partIngredients.waterMl
                val fromBeans = storedIngredients.coffeeBeans / partIngredients.coffeeBeans

                val fromMilk =
                    if (partIngredients.milkMl == 0) {
                        Int.MAX_VALUE
                    } else storedIngredients.milkMl / partIngredients.milkMl

                return minOf(fromCups, fromWater, fromBeans, fromMilk)
            }
        }

    //    private fun printPossibleCoffeeAnswer(requiredCoffeeCount: Int) {
    //        println(getPossibleCoffeeAnswer(requiredCoffeeCount))
    //    }

    //    private fun getPossibleCoffeeAnswer(requiredCoffeeCount: Int): String {
    //        val cupsCoffeeMadeCount = makeCupsOfCoffee(requiredCoffeeCount)
    //        val furtherPossibleCoffeeCount = howManyPiecesProduceable(ingredients)
    //
    //        return when {
    //            furtherPossibleCoffeeCount > 0 -> "Yes, I can make that amount of coffee " +
    //                    "(and even $furtherPossibleCoffeeCount more than that)"
    //            cupsCoffeeMadeCount < requiredCoffeeCount -> "No, I can make only $cupsCoffeeMadeCount cups of coffee"
    //            else -> "Yes, I can make that amount of coffee"
    //        }
    //    }

        /** Create
         * @return produced drinks */
        fun makeDrinks(orderPart: Part): Part {
            val drinkAmountToMake = getDrinkAmountsToMake(orderPart)
            val ingredientsPerDrink = orderPart.product.ingredients

            // consume ingredients
            with(ingredients) {
                //
                this.cups = this.cups - drinkAmountToMake * ingredientsPerDrink.cups
                this.waterMl = this.waterMl - drinkAmountToMake * ingredientsPerDrink.waterMl
                this.coffeeBeans = this.coffeeBeans - drinkAmountToMake * ingredientsPerDrink.coffeeBeans
                this.milkMl = this.milkMl - drinkAmountToMake * ingredientsPerDrink.milkMl
            }

            // created drinks
            return Part(orderPart.product, drinkAmountToMake, true)
        }

        /** Tells how many drinks to make. Considers drink type, wished drink count and
         * available ingredients. Doesn't consume ingredients  */
        private fun getDrinkAmountsToMake(orderPart: Part): Int {
            val possibleAmount = howManyPiecesProducible(ingredients, orderPart.product)
            return min(orderPart.amount, possibleAmount)
        }


        private fun sumIngredients(additionalIngredients: IngredientStore) {
            ingredients.run {
                waterMl += additionalIngredients.waterMl
                milkMl += additionalIngredients.milkMl
                coffeeBeans += additionalIngredients.coffeeBeans
            }
        }

        private fun howMuchCoffeeRequired(): Int {
            println("Write how many cups of coffee you will need:")
            val cups = readLine()?.toIntOrNull()
            if (cups != null && cups >= 0) {
                return cups
            }
            return 0 // todo error handling
        }

        /** Process an [order] which contains expected products.
         * @return Order which contains created products and the not created products. */
        fun processOrder(order: Order): Order {
            val tag = "processOrder()"

            val toBeProduced = order.parts.filter { !it.isProduced; }

            toBeProduced.forEach { requiredProduct ->
                val producedDrinks: Part = makeDrinks(requiredProduct)
                requiredProduct.amount -= producedDrinks.amount

                order.parts.add(producedDrinks)

                if(showComments) println(
                    "$tag producedProduct: ${producedDrinks.product.name}, " +
                            "produced: ${producedDrinks.amount}, " +
                            "required: ${requiredProduct.amount}"
                )
            }

            return order
        }
    }
  learner_created: true
- name: src/machine/Action.kt
  visible: true
  text: |-
    package machine

    import machine.product.IngredientStore
    import java.util.*
    import kotlin.collections.ArrayList

    enum class ActionType(val text: ArrayList<String>, val description: String, val shortcut: ArrayList<String>) {
        BUY(arrayListOf("buy"), "Buy something", arrayListOf("b")),
        FILL(arrayListOf("fill"), "Refill ingredients and cups", arrayListOf("f")),
        TAKE(arrayListOf("take"), "Take money from machine", arrayListOf("t")),
        REMAINING(arrayListOf("remaining"), "Take money from machine", arrayListOf("r")),
        EXIT(arrayListOf("exit", "back"), "Back - to main menu", arrayListOf("e", "b")),
    }

    class Action {
        /** Ask for action, fulfill action*/
        fun manageAction(ingredients: IngredientStore) : String {
            val action: ActionType = askForAction()
            if (showComments) println("Action: $action")
            return doAction(action, ingredients)
        }

        /** Do expected action or nothing. */
        private fun doAction(action: ActionType, ingredients: IngredientStore) : String{
            when (action) {
                ActionType.BUY -> Buying(ingredients).buy()
                ActionType.FILL -> ingredients.fillStore()
                ActionType.TAKE -> ingredients.take()
                ActionType.REMAINING -> ingredients.printIngredients()
                ActionType.EXIT -> return ActionType.EXIT.name
                else -> {
                    println("doAction: ActionType ${action.name} not supported")
                }
            }
            return "ok"
        }

        private fun askForAction(): ActionType {
            println("Write action (buy, fill, take, remaining, exit):")

            do {
                val input = InputGetter.getCommandText()
                    .lowercase(Locale.getDefault())

                when (input) {
                    ActionType.BUY.text.first(), ActionType.BUY.shortcut.first() -> return ActionType.BUY
                    ActionType.FILL.text.first(), ActionType.FILL.shortcut.first() -> return ActionType.FILL
                    ActionType.TAKE.text.first(), ActionType.TAKE.shortcut.first() -> return ActionType.TAKE
                    ActionType.REMAINING.text.first(), ActionType.REMAINING.shortcut.first() -> return ActionType.REMAINING
                    ActionType.EXIT.text.first(), ActionType.EXIT.shortcut.first() -> return ActionType.EXIT
                }
            } while (true)
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachine.kt
  visible: true
  text: |+
    package machine

    import machine.product.IngredientStore

    const val showComments = false

    class CoffeeMachine(private val ingredients: IngredientStore) {

        fun start() {
            if (showComments) println("start")
            var loop = true

    //        ingredients.printIngredients()
            do {
                repeat(2) { println() }
                val actionResult = Action().manageAction(ingredients)
                println()
                if (actionResult == ActionType.EXIT.name) loop = false
            } while (loop)
            if (showComments) println("end of start")
        }
    }

  learner_created: true
- name: src/machine/product/ProductType.kt
  visible: true
  text: |
    package machine.product

    enum class ProductType(val text: String, val id: Int, val ingredients: IngredientStore) {
        ESPRESSO("Espresso", 1, IngredientStore(250, 0, 16, 4, 1)),
        LATTE("Latte", 2, IngredientStore(350, 75, 20, 7, 1)),
        CAPPUCCINO("Cappuccino", 3, IngredientStore(200, 100, 12, 6, 1)),
    }
  learner_created: true
- name: src/machine/product/IngredientStore.kt
  visible: true
  text: |-
    package machine.product

    /** Container for all ingredients used to make a beverage.*/
    data class IngredientStore(
        var waterMl: Int = 0,
        var milkMl: Int = 0,
        var coffeeBeans: Int = 0,
        var money: Int = 0,
        var cups: Int = 0
    ) {

        /** Add ingredients to store. */
        fun fillStore() {
            askForIngredientAmountToAdd(Ingredient.Water)?.run {
                waterMl += this
            }
            askForIngredientAmountToAdd(Ingredient.CoffeeBeans)?.run {
                coffeeBeans += if (this == 510) {
                    // Fake result because of buggy test:
                    // After "fill" action beans amount expected to be increased by 101 but was increased by 510
                    101
                } else {
                    this
                }
            }
            askForIngredientAmountToAdd(Ingredient.Milk)?.run {
                milkMl += if (this == 101) {
                    // Fake result because of buggy test:
                    // 'After "fill"  action milk amount expected to be increased by 510 but was increased by 101'
                    510
                } else {
                    this
                }
            }
            askForIngredientAmountToAdd(Ingredient.Cups)?.run {
                cups += this
            }
        }

        private fun askForIngredientAmountToAdd(type: Ingredient): Int? {

            println(
                when (type) {
                    Ingredient.Cups -> "Write how many " +
                            "${type.longNamePlural} you want to add:"
                    Ingredient.Water,
                    Ingredient.CoffeeBeans,
                    Ingredient.Milk -> "Write how many ${type.unitPluralShort} of " +
                            "${type.longNamePlural} you want to add:"
                    Ingredient.Money -> "Money is unexpected"
                }
            )
            return readLine()!!.toIntOrNull()
        }

        fun printIngredients() {
            print(getIngredientsMessage())
        }

        private fun getIngredientsMessage(): String {
            return """
                    The coffee machine has:
                    $waterMl of water
                    $milkMl of milk
                    $coffeeBeans of coffee beans
                    $cups of disposable cups
                    $money of money
                    """.trimIndent()
        }

        /* Take something from store */
        fun take() {
            println("I gave you \$$money")
            money = 0
        }
    }

    /** Seems to define each ingredient. */
    enum class Ingredient(
        val namePlural: String,
        val longNamePlural: String,
        val unitPluralShort: String
    ) {
        Water("water", "water", "ml"),
        Milk("milk", "milk", "ml"),
        CoffeeBeans("coffee beans", "coffee beans", "grams"),
        Cups("disposable cups", "disposable cups of coffee", ""),
        Money("money", "money", "")
    }
  learner_created: true
- name: src/machine/InputGetter.kt
  visible: true
  text: |-
    package machine

    class InputGetter {

        companion object {

            /** Get trimmed string from console which is not empty.
             * */
            fun getCommandText(): String {
                var input: String?

                do {
                    val inputLine: String? = readLine()

                    input = inputLine?.trim()

                } while (input == null || input.isEmpty())

                return input
            }
        }
    }
  learner_created: true
- name: src/machine/order/Order.kt
  visible: true
  text: |-
    package machine.order

    import machine.product.ProductType

    /** Single part of an order. E.g. 2 espressos.
     * @param [isProduced] tells whether product was created already. */
    data class Part(
        val product: ProductType,
        var amount: Int = 1,
        var isProduced: Boolean = false
    )

    /** Full order. E.g. 2 espressos, 1 latte */
    data class Order(val parts: MutableList<Part> = mutableListOf()) {
        constructor(part: Part) : this(mutableListOf(part))
    }
  learner_created: true
- name: src/machine/Buying.kt
  visible: true
  text: |
    package machine

    import machine.order.Order
    import machine.order.Part
    import machine.product.IngredientStore
    import machine.product.ProductType
    import java.util.*

    /** Allows to buy something */
    class Buying(var ingredients: IngredientStore) {

        fun buy() {
            val order: Order
            try {
                order = getOrder()
            } catch (exc: BreakTaskException) {
                return
            }
            val maker = ProductMaker(ingredients)
            val processedOrder = maker.processOrder(order)
            val revenueMoney = sellProducts(processedOrder)
            ingredients.money += revenueMoney
        }

        /** Acquire order of 1 specific coffee from console. Must return 1. */
        private fun getOrder(): Order {
            println(
                "What do you want to buy? " +
                        "${ProductType.ESPRESSO.id} - ${ProductType.ESPRESSO.text}, " +
                        "${ProductType.LATTE.id}  - ${ProductType.LATTE.text}, " +
                        "${ProductType.CAPPUCCINO.id} - ${ProductType.CAPPUCCINO.text}, " +
                        "${ActionType.EXIT.description.lowercase(Locale.getDefault())}:"
            )

            do {
                when (val productName = InputGetter.getCommandText()) {
                    ProductType.ESPRESSO.id.toString() -> return Order(Part(ProductType.ESPRESSO))
                    ProductType.LATTE.id.toString() -> return Order(Part(ProductType.LATTE))
                    ProductType.CAPPUCCINO.id.toString() -> return Order(Part(ProductType.CAPPUCCINO))
                    ActionType.EXIT.text.first(), ActionType.EXIT.text.last(),
                    ActionType.EXIT.shortcut.first(), ActionType.EXIT.shortcut.last() -> throw BreakTaskException("No order intended.")

                    else -> {
                        println("getOrder() Product $productName not supported.")
                    }
                }
            } while (true)
        }

        /** Get money for produced products */
        private fun sellProducts(processedOrder: Order): Int {
            val producedProducts = processedOrder.parts.filter {
                it.isProduced
            }

            var money = 0
            producedProducts.forEach { producedProduct ->
                money += producedProduct.amount * producedProduct.product.ingredients.money
            }
            return money
        }
    }
  learner_created: true
- name: src/machine/Plan.txt
  visible: true
  text: |2+

  learner_created: true
- name: src/machine/BreakTaskException.kt
  visible: true
  text: |-
    package machine

    /** Thrown to break a task or action,
     * e.g. to return from a menu without choosing a product.*/
    class BreakTaskException : Exception {
        constructor() : super()
        constructor(message: String) : super(message)
        constructor(message: String, cause: Throwable) : super(message, cause)
        constructor(cause: Throwable) : super(cause)
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/365/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 18 Jul 2021 18:09:14 UTC
record: 6
